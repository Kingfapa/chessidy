//	readonly 	attribute	TYPE		NAME;
//	return_value			NAME(in TYPE param_name)
//										raises(ExceptionTYPE);
	
interface Figur {
	attribute	boolean		out;
	attribute	Board		observer;
				boolean		freeWay(in string to)
										raises(Error);
				boolean		isWhite();
				integer		getCol(in mixed pos);
				integer		getRow(in mixed pos);
				integer		offset(in boolean same);
				object		movement(in string to)
										raises(Error);
				string		shortType();
				void		setColour(in mixed clr);
				void		shift(in string to);
};

interface King : Figur {
	attribute	array		history;
	attribute	string		pos;
	attribute	string		symbol;
				boolean		isWhite();
				integer		uid();
				string		toString();
				void		move(in string to)
										raises(Error);
				?			rochade(in ? gr)
										raises(Error); // ??
};

interface Queen : Figur {
	attribute	array		history;
	attribute	string		pos;
	attribute	string		symbol;
				boolean		isWhite();
				integer		uid();
				string		toString();
				void		move(in string to)
										raises(Error);
};

interface Rook : Figur {
	attribute	array		history;
	attribute	string		pos;
	attribute	string		symbol;
				boolean		isWhite();
				integer		uid();
				string		toString();
				void		move(in string to)
										raises(Error);
};

interface Knight : Figur {
	attribute	array		history;
	attribute	string		pos;
	attribute	string		symbol;
				boolean		isWhite();
				integer		uid();
				string		toString();
				void		move(in string to)
										raises(Error);
};

interface Bishop : Figur {
	attribute	array		history;
	attribute	string		pos;
	attribute	string		symbol;
				boolean		isWhite();
				integer		uid();
				string		toString();
				void		move(in string to)
										raises(Error);
};

interface Pawn : Figur {
	attribute	array		history;
	attribute	string		pos;
	attribute	string		symbol;
				boolean		isWhite();
				integer		uid();
				string		toString();
				void		move(in string to)
										raises(Error);
				void		upgrade(in string type)
										raises(Error);
};

interface Board {
	attribute	array		moves;
	attribute	array		piece;
	attribute	array		players;
	attribute	array		position;
	attribute	boolean		schlagen;
	attribute	boolean		schlagen_bak;
	attribute	boolean		whiteOnDraw;
	attribute	integer		zugNr;
				boolean		hasTarget(in string to)
										raises(Error);
				boolean		onBoard(in string pos);
				boolean		isFight();
				boolean		isWhiteDraw();
				integer		offset(in boolean same);
				string		setPosition(in Figur fig
							            in string pos);
				string		toString();
				string		whois();
				void		capture(in string fld);
				void		isSchach(in Figur fig);
		?		void		isSchachmatt(?);
				void		notate(in Figur fig,
							       in string at,
							       in string to);
				void		setPlayer(in string colour,
							          in string name);
				void		testSchach(in Figur pce
							           in string to)
										raises(Error);
				void		toggle();
				void		updatePosition(in integer num,
							               in string pos);
				Figur		getFigurAt(in string pos)
										raises(Error);
};